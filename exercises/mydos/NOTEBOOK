#    SPDX-FileCopyrightText: 2024 Otto Fernandes <ottofernandes2012@gmail.com>
#   
#    SPDX-License-Identifier: GPL-3.0-or-later

# Solving
# This document is used for responding and commenting items from the README file located
in this folder.

# Exercise MyDOS

## Steps 1, 2 and 3
We just exported the project to the repository, and renamed it to LDOS - 
the Last Dance Operating System. The name is a reference to the fact that
Operating Systems 2 (which is this course) is the last course one of the
students from the team is taking before graduating.

Overall, not many difficulties here. Exploring TyDOS and TyFS was very helpful
and paved the way to incoming steps.

## Step 4
We just removed all references to the external program prog.c, both from Makefile,
tydos.ld and kernel.c

## Step 5
Included the disk.img image, formated with 4 block for boot, and a rule in Makefile
for creating the image populated with zeros.

Also included a program `whatever.c` in the disk. Just a plain Hello World in C.

## Step 6 and 7
Included rule for copying the OS binary to the disk. Flag `seek` is used to start copy
after the first 16 bytes of the disk, and flag `skip` is used to ignore the first 16
bytes from the binary. It seems that these 16 first bytes from the binary are not
important, so that's why building the OS from the disk worked (even though we are not
sure).

Also booted the OS from the disk.

## Step 8
Many changes were required to make `list` operation possible in the OS. For example,
disk was reformated to have 20 blocks size for boot. Besides, offset for the OS
binary was reset to 14 instead of 60 bytes, which was the default. This was, OS
binary starts right after disk header (2 bytes for jump instruction + 14 bytes
for rest of header = 16 from header)

Added new code file `file_system.c` and its objects. This file declares a function
that receives a sector and a number of sectors to be read from the disk, and outputs
its content to the memory. This is useful for organizating the code when retrieving
the name of files inside the disk.

Besides, added the list operation using the function from `file_system.c`, outputing
content from disk in the "file name section" from the image.

## Steps 9 and 10
A lot was done in these steps. First, add `crt0.S`, that calls `main` and return. This
`main` function is inside external program, so basically it enables calls to new binary
to be made.

The rest lies around the `exec` command inside the kernel, that asks for a program name,
locates the file inside the disk image, loads it in memory, jumps to the beginning
of the program and executes it.

Some engineering was required for the `call_program` function inside `kaux.c`. Basically,
it jumps to the start of an executable file.

`gets` is implemented, and a syscall for reading from the keyboard is added along.

Everything is put together inside `tydos.ld`, and the `hello.c` binary is put inside
`disk.img`. It now can be executed inside the simple OS.
